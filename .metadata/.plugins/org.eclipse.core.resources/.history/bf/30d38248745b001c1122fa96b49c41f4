package com.usermanagement.Userservice.Controller;

import java.util.Arrays;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

import com.usermanagement.Userservice.Model.OrderDet;
import com.usermanagement.Userservice.Model.PaymentDetails;

import com.usermanagement.Userservice.Model.Signup;
import com.usermanagement.Userservice.Model.Wash;
import com.usermanagement.Userservice.Model.washerRating;
import com.usermanagement.Userservice.service.UserServiceImpl;


@RestController
@RequestMapping("/us")
public class Controller {

	@Autowired
	private UserServiceImpl service;

	@Autowired
	private RestTemplate restTemplate;

	@PostMapping("/Register")
	public Signup saveUser(@RequestBody Signup signup) {
		signup.setId(service.getSequenceNumber(Signup.SEQUENCE_NAME));
		return service.addUser(signup);
	}

	@GetMapping("/allusers")
	public List<Signup> findAllUsers() {
		return service.getuser();
	}

	@PutMapping("/updateUser")
	public String updateUser(@RequestBody Signup signup) {
		String result = service.Updateuser(signup);
		return result;
	}

	@DeleteMapping("/deleteUser/{id}")
	public String deleteuser(@RequestParam(value = "id") int id) {
		return service.deleteUser(id);
	}

	
	  @GetMapping("/allpacks") public List<Wash> getwashpacks() { 
		  String baseurl ="http://localhost:8082/admin/allpacks";
		  Wash[] wp =restTemplate.getForObject(baseurl, Wash[].class);
	  
	  return Arrays.asList(wp); }
	 
	
	  
	  @PostMapping("/addorder")
	  public String addorder(@RequestBody OrderDet order) {
	  HttpHeaders headers = new HttpHeaders();
	  headers.setAccept(Arrays.asList(MediaType.APPLICATION_JSON));
	  HttpEntity<OrderDet> entity = new HttpEntity<OrderDet>(order,headers);
	  return restTemplate.exchange(
	  "http://localhost:8084/od/addorder", HttpMethod.POST, entity, String.class).getBody();
	  }
	  
	  
	  
	  @DeleteMapping("/cancelorder")
	  public String deleteorder(){
	  String baseurl="http://localhost:8084/od/deleteorder";
	  OrderDet order=restTemplate.getForObject(baseurl, OrderDet.class);
	  return "Your Order is successfully Canceled "+order;
	  }
	  
	  
	  @PostMapping("/addratings")
		public String addrating(@RequestBody washerRating rating) {
			HttpHeaders headers = new HttpHeaders();
			headers.setAccept(Arrays.asList(MediaType.APPLICATION_JSON));
			HttpEntity<washerRating> entity = new HttpEntity<washerRating>(rating, headers);

			return restTemplate.exchange("http://localhost:8082/admin/addratings", HttpMethod.POST, entity, String.class)
					.getBody();
		}	  

	  
	  
		  
	@PostMapping("/addpayment")
	public String payment(@RequestBody PaymentDetails payment) {
		HttpHeaders headers = new HttpHeaders();
		headers.setAccept(Arrays.asList(MediaType.APPLICATION_JSON));
		HttpEntity<PaymentDetails> entity = new HttpEntity<PaymentDetails>(payment, headers);
		return restTemplate.exchange("http://localhost:8085/am/payment", HttpMethod.POST, entity, String.class)
				.getBody();
	}

	

}
